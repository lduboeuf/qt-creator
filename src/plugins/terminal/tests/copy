#!/bin/bash

function set_clipboard() {
    b=$(echo -ne "$2" | base64);
    printf "\033]52;$1;$b\a\n"
}

function test_clipboard() {
    echo -e "\033[1m ⎆ The Clipboard should now contain '$2'\033[0m"

    set_clipboard "$1" "$2"

    read -p "    ⎆ Press enter to continue " -n1 -s
    echo
    echo
}

test_clipboard "c" "copypasta!"
test_clipboard "p" "Mask: p"
test_clipboard "q" "Mask: q"
test_clipboard "s" "Mask: s"
test_clipboard "cpqs" "Mask: cpqs"

echo -e "\033[1m ⎆ The Clipboard should now be empty\033[0m"
printf "\033]52;cpqs;\a\n"

read -p "    ⎆ Press enter to continue " -n1 -s
echo
echo

echo -e "\033[1m ⎆ The Clipboard should still be empty\033[0m"
set_clipboard "01234567" "Hello World!"

read -p "    ⎆ Press enter to continue " -n1 -s
echo
echo

test_clipboard "c01234567" "Hello World!"

echo -e "\033[1m ⎆ The Clipboard should now contain the source of terminalsurface.cpp\033[0m"
printf "\033]52;c;\a\n"

read -p "    ⎆ Press enter to continue " -n1 -s
echo
echo
